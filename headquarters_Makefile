LIB_DRI = lib
LIB_NAME = libname

# debug目标文件
DEBUG_TARGET_LIB = $(LIB_DRI)/lib$(LIB_NAME)_debug.a

# release目标文件
RELEASE_TARGET_LIB = $(LIB_DRI)/lib$(LIB_NAME)_release.a

# debug源文件目录
SOURCE_DIRS_DEBUG = ../******/obj/debug\
					../*****/obj/debug\
					../*****/obj/debug\
					../Src/obj/debug


# release源文件目录
SOURCE_DIRS_RELEASE = ../******/obj/release\
					../******/obj/release\
					../*******/obj/release\
					../Src/obj/release

default:
	@echo "No target specified. Please specify a target."

ifeq ($(MAKECMDGOALS),)
	@echo "No argument. The default execution make debug."
	$(MAKE) debug
endif

ifeq ($(filter debug, $(MAKECMDGOALS)), debug)
debug: | debug_make  # 这样可以保证OBJECTS_DEBUG变量正常提取到.o文件(执行debug目标前先执行debgu_make, 但debug_make不作为debug的依赖关系)
	mkdir -p $(LIB_DRI)
	@# 找到每个debug源目录中的.o文件
	$(eval OBJECTS_DEBUG = $(foreach dir, $(SOURCE_DIRS_DEBUG), $(wildcard $(dir)/*.o)))
	@# @echo $(OBJECTS_DEBUG)
	ar rcs $(DEBUG_TARGET_LIB) $(OBJECTS_DEBUG)

debug_make:
	pushd ../***** && make debug && popd
	pushd ../***** && make debug && popd
	pushd ../****** && make debug && popd
	pushd ../Src && make debug && popd
endif

ifeq ($(filter release, $(MAKECMDGOALS)), release)
release: | release_make
	mkdir -p $(LIB_DRI)
	@# 找到每个release源目录中的.o文件
	$(eval OBJECTS_RELEASE = $(foreach dir, $(SOURCE_DIRS_RELEASE), $(wildcard $(dir)/*.o)))
	@# @echo $(OBJECTS_RELEASE)
	ar rcs $(RELEASE_TARGET_LIB) $(OBJECTS_RELEASE)

release_make:
	pushd ../***** && make release && popd
	pushd ../***** && make release && popd
	pushd ../****** && make release && popd
	pushd ../Src && make release && popd
endif

clean:
	pushd ../******* && make clean && popd
	pushd ../******* && make clean && popd
	pushd ../******* && make clean && popd
	pushd ../Src && make clean && popd
	rm -rf $(LIB_DRI)

# test:
#     echo $(SOURCE_DIRS_DEBUG)
#     echo $(OBJECTS_DEBUG)

.PHONY: release debug clean default test
